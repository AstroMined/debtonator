***** SWITCH TO PLAN MODE!!! *****

Start session:
follow your custom instructions

Formulate a plan to continue on with the in-progress items, but keep the scope limited to work that can completed in a single session.
If changes are made to backend Python code, ensure the testing suite is adjusted to reflect those changes.
Ensure you modify fixtures, delete tests that are no longer relevant, and create or update tests to reflect new functionality.

When running the full test suite with pytest, run it like below to keep the output limited to conserve tokens in your context window:
pytest -q --tb=no --disable-warnings

If you need to run a specific single test to get more error context, you can do it with tracebacks if needed.
DO NOT RUN MORE THAN ONE SINGLE SPECIFIC TEST WITH TRACEBACKS.

I'll repeat it.
ONLY USE TRACEBACKS WHEN RUNNING A SINGLE SPECIFIC TEST.
For example:
pytest -v tests/unit/test_accounts.py::test_create_checking_account
You WILL lock up if you don't listen.

Also, there have been many significant code changes recently, but the test suite was NOT updated everywhere to reflect that.
Assume errors or failures in tests are due to a poorly written or a test that's no longer relevant before you assume there's a problem in the codebase.

End session:
update memory bank

Ensure you define a good starting point for our next working session.
If you have not done so yet, update README.md, CHANGELOG.md and update minor or patch semantic versioning as needed.
DO NOT UPDATE MAJOR VERSION, as we haven't had a full, stable release yet.
PLEASE TAKE GREAT CARE TO ENSURE YOUR CHANGES TO README.md AND CHANGELOG.md CONTAIN THE FULL OUTPUT; DO NOT USE PLACEHOLDERS.
Create ADRs ONLY if absolutely necessary to document a MAJOR architectural change.
Finally, suggest a good commit message for the tasks accomplished during this session.

follow your custom instructions

Formulate a plan to expand test coverage for services only, but keep the scope limited to work that can completed in a single session.
You'll first need to get a coverage report to see where the weaknesses are.



follow your custom instructions

Formulate a plan to continue on with the in-progress items, but keep the scope limited to work that can completed in a single session.
If you plan any database changes, I would suggest that you delete the DB and re-initialize instead of fighting with Alembic migrations.
This is just a dev environment, so there's no data loss to worry about in the DB.

Occasionally, we run into problems with re-initializing the database.
This is what we've found to work smoothly in the past:
rm -f debtonator.db && python -m src.database.init_db

When running the test suite with pytest, run it like below to keep the output limited to conserve tokens in your context window:
pytest -q --tb=no --disable-warnings
You aren't required to run the FULL suite, that's just an example.

If you need to run a specific single test to get more error context, you can do it with tracebacks if needed.
DO NOT RUN MORE THAN ONE SINGLE SPECIFIC TEST WITH TRACEBACKS.

I'll repeat it.
ONLY USE TRACEBACKS OR THE -v FLAG WHEN RUNNING A SINGLE SPECIFIC FUNCTION IN A SINGLE SPECIFIC TEST FILE.
For example:
pytest -v tests/unit/test_accounts.py::test_create_checking_account
You will lock up if you don't listen.


Current Status:

Started implementing timezone-aware datetime standardization (ADR 011)
Updated schemas (impact_analysis.py, income_trends.py, cashflow.py) to use datetime instead of date
Began updating tests to handle timezone-aware datetimes
Initialized database changes to support timezone-aware fields
Next Session Starting Point:

Continue updating src/services/cashflow.py:

Complete the timezone-aware datetime conversion
Update all date comparisons to handle timezone-aware datetimes
Ensure consistent UTC timezone usage throughout
Update remaining tests:

Fix test_historical_trends_services.py datetime comparisons
Fix test_account_specific_forecasts.py remaining date usages
Fix test_cashflow_services.py datetime assertions
Fix test_cross_account_analysis_services.py datetime comparisons
Update models to ensure timezone awareness:

Review all models using date/datetime fields
Update SQLAlchemy column definitions to use timezone=True